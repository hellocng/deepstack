---
description: Multitenant architecture patterns and routing conventions
globs: ['**/app/**/*', '**/middleware.ts', '**/lib/auth/**/*']
alwaysApply: false
---

# DeepStack - Multitenant Architecture Patterns

## Terminology Standardization

**IMPORTANT**: The following terms are synonymous and should be used consistently:

- **Room** (preferred) - The primary term for a poker room/establishment
- **Tenant** - Database/technical term (legacy, being phased out)
- **Operator** - Business term referring to the room's management

**Usage Guidelines**:

- Use "room" in user-facing content, URLs, and new code
- "tenant" may still appear in database schemas and legacy code
- "operator" refers to room staff/management, not the room itself
- Always be consistent within the same context

## URL Structure & Routing

### Route Organization

```
/[room]                      # Player pages
├── /                        # Room homepage
├── /games                   # Game listings
├── /tables                  # Table status
├── /tournaments             # Tournament schedule
├── /waitlist                # Join waitlist
├── /profile                 # Player profile
└── /friends                 # Friends list

/[room]/admin                # Room operator pages
├── /                        # Admin dashboard
├── /games                   # Game management
├── /tables                  # Table management
├── /tournaments             # Tournament management
├── /players                 # Player management
├── /waitlist                # Waitlist management
└── /settings                # Room settings
```

### Route Protection

```typescript
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'

export async function middleware(request: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req: request, res })

  // Get session
  const {
    data: { session },
  } = await supabase.auth.getSession()

  // Extract room from URL
  const pathname = request.nextUrl.pathname
  const pathSegments = pathname.split('/').filter(Boolean)
  const room = pathSegments[0]
  const isAdminRoute = pathSegments[1] === 'admin'

  // Validate room exists
  if (room && !isValidRoom(room)) {
    return NextResponse.redirect(new URL('/404', request.url))
  }

  // Protect admin routes
  if (isAdminRoute) {
    if (!session) {
      return NextResponse.redirect(new URL(`/${room}/login`, request.url))
    }

    // Check if user has admin/operator role for this room
    const { data: user } = await supabase
      .from('users')
      .select('role, room_id')
      .eq('id', session.user.id)
      .single()

    if (
      !user ||
      user.room_id !== room ||
      !['operator', 'admin'].includes(user.role)
    ) {
      return NextResponse.redirect(new URL(`/${room}`, request.url))
    }
  }

  return res
}

export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico|api).*)'],
}
```

## Room Context

### Room Provider

```typescript
// lib/context/room-context.tsx
'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { useParams } from 'next/navigation'
import { supabase } from '@/lib/supabase/client'

interface Room {
  id: string
  name: string
  code: string
  is_active: boolean
}

interface RoomContextType {
  room: Room | null
  loading: boolean
  error: string | null
}

const RoomContext = createContext<RoomContextType | undefined>(undefined)

export function RoomProvider({ children }: { children: React.ReactNode }) {
  const params = useParams()
  const roomCode = params.room as string
  const [room, setRoom] = useState<Room | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (!roomCode) {
      setLoading(false)
      return
    }

    const fetchRoom = async () => {
      try {
        const { data, error } = await supabase
          .from('rooms')
          .select('*')
          .eq('code', roomCode)
          .eq('is_active', true)
          .single()

        if (error) {
          setError('Room not found')
        } else {
          setRoom(data)
        }
      } catch (err) {
        setError('Failed to load room')
      } finally {
        setLoading(false)
      }
    }

    fetchRoom()
  }, [roomCode])

  return (
    <RoomContext.Provider value={{ room, loading, error }}>
      {children}
    </RoomContext.Provider>
  )
}

export function useRoom() {
  const context = useContext(RoomContext)
  if (context === undefined) {
    throw new Error('useRoom must be used within a RoomProvider')
  }
  return context
}
```

### Room Layout

```typescript
// app/[room]/layout.tsx
import { RoomProvider } from '@/lib/context/room-context'
import { RoomHeader } from '@/components/room-header'
import { RoomSidebar } from '@/components/room-sidebar'

export default function RoomLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: { room: string }
}) {
  return (
    <RoomProvider>
      <div className="min-h-screen bg-gray-50">
        <RoomHeader />
        <div className="flex">
          <RoomSidebar />
          <main className="flex-1 p-6">
            {children}
          </main>
        </div>
      </div>
    </RoomProvider>
  )
}
```

## Authentication Patterns

### Player Authentication

```typescript
// lib/auth/player-auth.ts
import { supabase } from '@/lib/supabase/client'
import type { User } from '@supabase/supabase-js'

export interface PlayerUser extends User {
  player: {
    id: string
    phone_number: string
    alias: string
    email?: string
  }
}

export async function getPlayerUser(): Promise<PlayerUser | null> {
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user) return null

  // Get player profile
  const { data: playerProfile } = await supabase
    .from('players')
    .select('*')
    .eq('id', user.id)
    .single()

  if (!playerProfile) return null

  return {
    ...user,
    player: playerProfile,
  }
}

export async function requirePlayerAuth(): Promise<PlayerUser> {
  const user = await getPlayerUser()

  if (!user) {
    throw new Error('Player authentication required')
  }

  return user
}
```

### Room Operator Authentication

```typescript
// lib/auth/operator-auth.ts
import { supabase } from '@/lib/supabase/client'
import type { User } from '@supabase/supabase-js'

export interface OperatorUser extends User {
  operator: {
    id: string
    email: string
    first_name: string
    last_name: string
    room_id: string // Note: room_id in database, but tenant_id may still exist in legacy code
    role: 'admin' | 'supervisor' | 'dealer'
    room: {
      // Note: room in new code, tenant in legacy code
      id: string
      name: string
      code: string
    }
  }
}

export async function getOperatorUser(
  roomCode: string
): Promise<OperatorUser | null> {
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user) return null

  // Get operator profile with room info
  const { data: operatorProfile } = await supabase
    .from('operators')
    .select(
      `
      *,
      room:rooms(*)  // Note: rooms table in new schema, tenants in legacy
    `
    )
    .eq('id', user.id)
    .eq('room.code', roomCode)
    .single()

  if (!operatorProfile) return null

  return {
    ...user,
    operator: operatorProfile,
  }
}

export async function requireOperatorAuth(
  roomCode: string
): Promise<OperatorUser> {
  const user = await getOperatorUser(roomCode)

  if (!user) {
    throw new Error('Room operator authentication required')
  }

  return user
}

export async function requireAdminAuth(
  roomCode: string
): Promise<OperatorUser> {
  const user = await requireOperatorAuth(roomCode)

  if (!['admin', 'supervisor'].includes(user.operator.role)) {
    throw new Error('Admin access required')
  }

  return user
}
```

### Room Login Component

```typescript
// components/auth/room-login.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { supabase } from '@/lib/supabase/client'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { useRoom } from '@/lib/context/room-context'

export function RoomLogin() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const router = useRouter()
  const { room } = useRoom()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      if (error) {
        setError(error.message)
      } else {
        // Redirect to room homepage
        router.push(`/${room?.code}`)
      }
    } catch (err) {
      setError('An unexpected error occurred')
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleLogin} className="space-y-4">
      <div>
        <Input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
      </div>
      <div>
        <Input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>
      {error && (
        <div className="text-red-600 text-sm">{error}</div>
      )}
      <Button type="submit" disabled={loading} className="w-full">
        {loading ? 'Signing in...' : 'Sign In'}
      </Button>
    </form>
  )
}
```

## Data Isolation

### Room-Scoped Queries

```typescript
// lib/supabase/room-queries.ts
import { supabase } from './client'

export class RoomQueryBuilder {
  constructor(private roomId: string) {}

  // Games
  games() {
    return supabase
      .from('games')
      .select('*')
      .eq('room_id', this.roomId) // Note: room_id in new schema, tenant_id in legacy
      .eq('is_active', true)
  }

  // Tables
  tables() {
    return supabase.from('tables').select('*').eq('room_id', this.roomId)
  }

  // Users
  users() {
    return supabase
      .from('users')
      .select('*')
      .eq('room_id', this.roomId)
      .eq('is_active', true)
  }

  // Waitlist entries
  waitlistEntries() {
    return supabase
      .from('waitlist_entries')
      .select('*')
      .eq('room_id', this.roomId)
  }

  // Tournaments
  tournaments() {
    return supabase.from('tournaments').select('*').eq('room_id', this.roomId)
  }
}

// Usage in components
export function useRoomQueries(roomId: string) {
  return new RoomQueryBuilder(roomId)
}
```

### Server Actions with Room Context

```typescript
// app/[room]/admin/games/actions.ts
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { requireAdminAuth } from '@/lib/auth/room-auth'
import { GameService } from '@/lib/supabase/queries'

export async function createGame(roomCode: string, formData: FormData) {
  // Verify admin access
  const user = await requireAdminAuth(roomCode)

  const gameData = {
    name: formData.get('name') as string,
    game_type: formData.get('game_type') as string,
    buy_in: parseFloat(formData.get('buy_in') as string),
    max_players: parseInt(formData.get('max_players') as string),
    room_id: user.room_id, // Note: room_id in new schema, tenant_id in legacy
  }

  try {
    await GameService.createGame(gameData)
    revalidatePath(`/${roomCode}/admin/games`)
  } catch (error) {
    throw new Error('Failed to create game')
  }
}

export async function updateGame(
  roomCode: string,
  gameId: string,
  formData: FormData
) {
  // Verify admin access
  const user = await requireAdminAuth(roomCode)

  const updates = {
    name: formData.get('name') as string,
    buy_in: parseFloat(formData.get('buy_in') as string),
    max_players: parseInt(formData.get('max_players') as string),
  }

  try {
    await GameService.updateGame(gameId, updates)
    revalidatePath(`/${roomCode}/admin/games`)
  } catch (error) {
    throw new Error('Failed to update game')
  }
}
```

## Navigation Components

### Room Navigation

```typescript
// components/room-header.tsx
'use client'

import Link from 'next/link'
import { useRoom } from '@/lib/context/room-context'
import { useAuth } from '@/lib/auth/use-auth'
import { Button } from '@/components/ui/button'

export function RoomHeader() {
  const { room } = useRoom()
  const { user, signOut } = useAuth()

  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center">
            <Link href={`/${room?.code}`} className="text-xl font-bold">
              {room?.name}
            </Link>
          </div>

          <nav className="hidden md:flex space-x-8">
            <Link href={`/${room?.code}/games`}>Games</Link>
            <Link href={`/${room?.code}/tables`}>Tables</Link>
            <Link href={`/${room?.code}/tournaments`}>Tournaments</Link>
            {user?.role === 'operator' || user?.role === 'admin' ? (
              <Link href={`/${room?.code}/admin`}>Admin</Link>
            ) : null}
          </nav>

          <div className="flex items-center space-x-4">
            {user ? (
              <>
                <span>Welcome, {user.display_name}</span>
                <Button variant="outline" onClick={signOut}>
                  Sign Out
                </Button>
              </>
            ) : (
              <Link href={`/${room?.code}/login`}>
                <Button>Sign In</Button>
              </Link>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}
```

## Error Handling

### Room-Specific Error Pages

```typescript
// app/[room]/not-found.tsx
import Link from 'next/link'
import { Button } from '@/components/ui/button'

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">404</h1>
        <p className="text-gray-600 mb-8">This page doesn't exist in this poker room.</p>
        <Link href="/">
          <Button>Go Home</Button>
        </Link>
      </div>
    </div>
  )
}
```
