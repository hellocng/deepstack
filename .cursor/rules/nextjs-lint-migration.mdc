---
description: Next.js Lint Migration to ESLint CLI
globs: ["package.json", "eslint.config.*", ".eslintrc.*"]
alwaysApply: false
---

# Next.js Lint Migration

## Overview

The `next lint` command is deprecated in Next.js 15+ and will be removed in Next.js 16. We need to migrate to using ESLint CLI directly.

## Migration Command

Run this command to automatically migrate:
```bash
npx @next/codemod@canary next-lint-to-eslint-cli .
```

## What This Migration Does

1. **Updates package.json scripts** - Changes from `next lint` to `eslint .`
2. **Creates ESLint configuration** - Sets up proper ESLint config files
3. **Updates CI/CD pipelines** - Modifies GitHub Actions and other CI configs
4. **Updates documentation** - Changes references from `next lint` to `eslint .`

## Manual Migration Steps

If the automatic migration doesn't work or you prefer manual migration:

### 1. Update package.json scripts

```json
{
  "scripts": {
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "lint:check": "eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0"
  }
}
```

### 2. Update ESLint configuration

Ensure your `eslint.config.cjs` includes Next.js rules:

```javascript
const { FlatCompat } = require('@eslint/eslintrc')
const js = require('@eslint/js')
const typescript = require('@typescript-eslint/eslint-plugin')
const typescriptParser = require('@typescript-eslint/parser')
const path = require('path')

const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
})

module.exports = [
  ...compat.extends('next/core-web-vitals', 'next/typescript'),
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      parser: typescriptParser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    plugins: {
      '@typescript-eslint': typescript,
    },
    rules: {
      // Your custom rules here
    },
  },
  {
    ignores: [
      'node_modules/**',
      '.next/**',
      'out/**',
      'dist/**',
      'build/**',
      'coverage/**',
      '*.config.js',
      '*.config.cjs',
      '*.config.ts',
      'next-env.d.ts',
    ],
  },
]
```

### 3. Update CI/CD pipelines

Replace `npm run lint` with `npx eslint .` in:
- GitHub Actions workflows
- Pre-commit hooks
- Deployment scripts

### 4. Update documentation

Update any references to `next lint` in:
- README.md
- Contributing guidelines
- Development setup docs

## Benefits of Migration

1. **Better performance** - ESLint CLI is faster than Next.js wrapper
2. **More control** - Direct access to ESLint configuration options
3. **Future-proof** - Avoids deprecation warnings and future breaking changes
4. **Consistency** - Same linting approach across all projects

## Testing the Migration

After migration, test with:
```bash
# Run linting
npx eslint .

# Fix auto-fixable issues
npx eslint . --fix

# Check with zero warnings
npx eslint . --max-warnings 0
```

## Troubleshooting

### Common Issues

1. **Missing dependencies** - Ensure all ESLint packages are installed
2. **Configuration conflicts** - Check for duplicate ESLint configs
3. **Rule conflicts** - Verify rule compatibility between Next.js and TypeScript

### Rollback Plan

If issues occur, you can temporarily rollback by:
1. Reverting package.json scripts to use `next lint`
2. Removing new ESLint config files
3. Restoring original configuration

## Next Steps

After successful migration:
1. Update team documentation
2. Train team members on new commands
3. Update CI/CD pipelines
4. Remove any remaining `next lint` references