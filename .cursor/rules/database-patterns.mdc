---
description: Database patterns and Supabase best practices
globs: ["**/lib/supabase/**/*", "**/app/api/**/*", "**/types/**/*"]
alwaysApply: false
---

# Database Patterns & Supabase Best Practices

## Database Schema Conventions

### Table Naming
- Use snake_case for all table names
- Use plural names: `users`, `games`, `tournaments`, `waitlist_entries`
- Use descriptive names: `poker_tables`, `game_sessions`

### Column Naming
- Use snake_case for column names
- Use descriptive foreign keys: `user_id`, `game_id`, `table_id`
- Use consistent naming for common fields:
  - `id` (primary key)
  - `created_at` (timestamp)
  - `updated_at` (timestamp)
  - `is_active` (boolean)

### Example Schema
```sql
-- Players table (global, phone-based auth)
CREATE TABLE players (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  phone_number VARCHAR(20) UNIQUE NOT NULL,
  alias VARCHAR(100) NOT NULL,
  avatar_url TEXT,
  email VARCHAR(255) UNIQUE,
  is_active BOOLEAN DEFAULT true,
  last_login TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Operators table (tenant-specific, email/password auth)
CREATE TABLE operators (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  avatar_url TEXT,
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  role operator_role NOT NULL,
  is_active BOOLEAN DEFAULT true,
  last_login TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Games table
CREATE TABLE games (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  game_type game_type NOT NULL,
  buy_in DECIMAL(10,2) NOT NULL,
  max_players INTEGER NOT NULL,
  rake TEXT,
  description TEXT,
  tenant_id UUID REFERENCES tenants(id),
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tables table
CREATE TABLE tables (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(50) NOT NULL,
  game_id UUID REFERENCES games(id),
  seat_count INTEGER NOT NULL,
  current_players INTEGER DEFAULT 0,
  status table_status DEFAULT 'available',
  tenant_id UUID REFERENCES tenants(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## Row Level Security (RLS)

### RLS Policies
Always implement RLS policies for data security:

```sql
-- Enable RLS
ALTER TABLE players ENABLE ROW LEVEL SECURITY;
ALTER TABLE operators ENABLE ROW LEVEL SECURITY;
ALTER TABLE games ENABLE ROW LEVEL SECURITY;
ALTER TABLE tables ENABLE ROW LEVEL SECURITY;

-- Players can view all players (for friend system)
CREATE POLICY "Players can view all players" ON players
  FOR SELECT USING (true);

-- Players can update their own profile
CREATE POLICY "Players can update their own profile" ON players
  FOR UPDATE USING (id = auth.uid());

-- Operators can view operators in their tenant
CREATE POLICY "Operators can view operators in their tenant" ON operators
  FOR SELECT USING (
    tenant_id IN (
      SELECT tenant_id FROM operators 
      WHERE id = auth.uid()
    )
  );

-- Operators can update their own profile
CREATE POLICY "Operators can update their own profile" ON operators
  FOR UPDATE USING (id = auth.uid());

-- Players and operators can view games in any tenant
CREATE POLICY "Users can view games" ON games
  FOR SELECT USING (true);

-- Operators can manage games in their tenant
CREATE POLICY "Operators can manage games in their tenant" ON games
  FOR ALL USING (
    tenant_id IN (
      SELECT tenant_id FROM operators 
      WHERE id = auth.uid() 
      AND role IN ('admin', 'supervisor')
    )
  );
```

## Supabase Client Patterns

### Client Configuration
```typescript
// lib/supabase/client.ts
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'

// Client-side client
export const supabase = createClientComponentClient()

// Server-side client
export const createServerClient = () => {
  const cookieStore = cookies()
  return createServerComponentClient({ cookies: () => cookieStore })
}
```

### Database Operations
```typescript
// lib/supabase/queries.ts
import { supabase } from './client'
import type { Database } from '@/types/database'

type Tables = Database['public']['Tables']
type Game = Tables['games']['Row']
type GameInsert = Tables['games']['Insert']
type GameUpdate = Tables['games']['Update']

export class GameService {
  // Get all games for a tenant
  static async getGames(tenantId: string): Promise<Game[]> {
    const { data, error } = await supabase
      .from('games')
      .select('*')
      .eq('tenant_id', tenantId)
      .eq('is_active', true)
      .order('created_at', { ascending: false })

    if (error) {
      throw new Error(`Failed to fetch games: ${error.message}`)
    }

    return data || []
  }

  // Create a new game
  static async createGame(game: GameInsert): Promise<Game> {
    const { data, error } = await supabase
      .from('games')
      .insert(game)
      .select()
      .single()

    if (error) {
      throw new Error(`Failed to create game: ${error.message}`)
    }

    return data
  }

  // Update a game
  static async updateGame(id: string, updates: GameUpdate): Promise<Game> {
    const { data, error } = await supabase
      .from('games')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) {
      throw new Error(`Failed to update game: ${error.message}`)
    }

    return data
  }

  // Delete a game (soft delete)
  static async deleteGame(id: string): Promise<void> {
    const { error } = await supabase
      .from('games')
      .update({ is_active: false })
      .eq('id', id)

    if (error) {
      throw new Error(`Failed to delete game: ${error.message}`)
    }
  }
}
```

## TypeScript Types

### Database Types
```typescript
// types/database.ts
export type Database = {
  public: {
    Tables: {
      players: {
        Row: {
          id: string
          phone_number: string
          alias: string
          avatar_url: string | null
          email: string | null
          is_active: boolean
          last_login: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          phone_number: string
          alias: string
          avatar_url?: string | null
          email?: string | null
          is_active?: boolean
          last_login?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          phone_number?: string
          alias?: string
          avatar_url?: string | null
          email?: string | null
          is_active?: boolean
          last_login?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      operators: {
        Row: {
          id: string
          email: string
          password_hash: string
          first_name: string
          last_name: string
          phone_number: string | null
          avatar_url: string | null
          tenant_id: string
          role: 'admin' | 'supervisor' | 'dealer'
          is_active: boolean
          last_login: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          email: string
          password_hash: string
          first_name: string
          last_name: string
          phone_number?: string | null
          avatar_url?: string | null
          tenant_id: string
          role: 'admin' | 'supervisor' | 'dealer'
          is_active?: boolean
          last_login?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          email?: string
          password_hash?: string
          first_name?: string
          last_name?: string
          phone_number?: string | null
          avatar_url?: string | null
          tenant_id?: string
          role?: 'admin' | 'supervisor' | 'dealer'
          is_active?: boolean
          last_login?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      // ... other tables
    }
    Enums: {
      operator_role: 'admin' | 'supervisor' | 'dealer'
      game_type: 'texas_holdem' | 'omaha' | 'seven_card_stud'
      table_status: 'available' | 'occupied' | 'maintenance'
    }
  }
}
```

## Real-time Subscriptions

### Real-time Patterns
```typescript
// lib/supabase/realtime.ts
import { supabase } from './client'
import type { RealtimeChannel } from '@supabase/supabase-js'

export class RealtimeService {
  private channels: Map<string, RealtimeChannel> = new Map()

  // Subscribe to table changes
  subscribeToTables(
    tenantId: string,
    onUpdate: (payload: any) => void
  ): RealtimeChannel {
    const channelName = `tables:${tenantId}`
    
    if (this.channels.has(channelName)) {
      return this.channels.get(channelName)!
    }

    const channel = supabase
      .channel(channelName)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'tables',
          filter: `tenant_id=eq.${tenantId}`,
        },
        onUpdate
      )
      .subscribe()

    this.channels.set(channelName, channel)
    return channel
  }

  // Unsubscribe from a channel
  unsubscribe(channelName: string): void {
    const channel = this.channels.get(channelName)
    if (channel) {
      supabase.removeChannel(channel)
      this.channels.delete(channelName)
    }
  }

  // Unsubscribe from all channels
  unsubscribeAll(): void {
    this.channels.forEach((channel) => {
      supabase.removeChannel(channel)
    })
    this.channels.clear()
  }
}

export const realtimeService = new RealtimeService()
```

## Error Handling

### Database Error Handling
```typescript
// lib/supabase/errors.ts
export class DatabaseError extends Error {
  constructor(
    message: string,
    public code?: string,
    public details?: any
  ) {
    super(message)
    this.name = 'DatabaseError'
  }
}

export function handleDatabaseError(error: any): never {
  if (error.code === '23505') {
    throw new DatabaseError('Duplicate entry', error.code, error.details)
  }
  
  if (error.code === '23503') {
    throw new DatabaseError('Foreign key constraint violation', error.code, error.details)
  }
  
  if (error.code === '42501') {
    throw new DatabaseError('Insufficient privileges', error.code, error.details)
  }
  
  throw new DatabaseError(error.message || 'Database operation failed', error.code, error.details)
}

// Usage in service methods
export class GameService {
  static async createGame(game: GameInsert): Promise<Game> {
    try {
      const { data, error } = await supabase
        .from('games')
        .insert(game)
        .select()
        .single()

      if (error) {
        handleDatabaseError(error)
      }

      return data
    } catch (error) {
      if (error instanceof DatabaseError) {
        throw error
      }
      throw new DatabaseError('Unexpected error occurred')
    }
  }
}
```

## Migrations

### Migration Structure
```sql
-- migrations/001_initial_schema.sql
-- Create tenants table
CREATE TABLE tenants (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  code VARCHAR(20) UNIQUE NOT NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create users table
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  display_name VARCHAR(100) NOT NULL,
  avatar_url TEXT,
  role user_role DEFAULT 'player',
  tenant_id UUID REFERENCES tenants(id),
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create custom types
CREATE TYPE user_role AS ENUM ('player', 'operator', 'admin');
CREATE TYPE game_type AS ENUM ('texas_holdem', 'omaha', 'seven_card_stud');
CREATE TYPE table_status AS ENUM ('available', 'occupied', 'maintenance');

-- Enable RLS
ALTER TABLE tenants ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view their tenant" ON tenants
  FOR SELECT USING (
    id = (SELECT tenant_id FROM users WHERE id = auth.uid())
  );
```

## Performance Optimization

### Indexing
```sql
-- Create indexes for common queries
CREATE INDEX idx_users_tenant_id ON users(tenant_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_games_tenant_id ON games(tenant_id);
CREATE INDEX idx_tables_game_id ON tables(game_id);
CREATE INDEX idx_tables_tenant_id ON tables(tenant_id);

-- Composite indexes for complex queries
CREATE INDEX idx_games_tenant_active ON games(tenant_id, is_active);
CREATE INDEX idx_tables_status_tenant ON tables(status, tenant_id);
```

### Query Optimization
```typescript
// Use select to limit returned columns
const { data } = await supabase
  .from('games')
  .select('id, name, game_type, buy_in')
  .eq('tenant_id', tenantId)

// Use pagination for large datasets
const { data } = await supabase
  .from('games')
  .select('*')
  .eq('tenant_id', tenantId)
  .range(0, 9) // First 10 records

// Use filters to reduce data transfer
const { data } = await supabase
  .from('tables')
  .select('*')
  .eq('tenant_id', tenantId)
  .eq('status', 'available')
  .order('created_at', { ascending: false })
```